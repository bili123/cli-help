[32m
       Hilfe im Terminal, auf Deutsch.     
 _____      _                          _   
|_   _|   _| |_ ___  _ __   __ _ _   _| |_ 
  | || | | | __/ _ \| '_ \ / _` | | | | __|
  | || |_| | || (_) | | | | (_| | |_| | |_ 
  |_| \__,_|\__\___/|_| |_|\__,_|\__,_|\__|

         curl cli.help/[31mSCHLAGWORT
[31m
###########################################
##            √úber cli.help              ##
###########################################

[92mcli.help[0m ist ein Projekt von Tutonaut.de.
Weitere Infos und alle Features: [92mcurl cli.help
[31m
###########################################
##                  sed                  ##
###########################################

[33m## Beispieltext f√ºr Beispiele, die aus "text.txt" lesen:
[0m Ich sage moo und auch tar, das ergibt foobar - und nochmal: moo.

[33m## sed ist simpel - sieht nur kompliziert aus wegen der RegEx.
Generelle Syntax f√ºr fast alles mit und ohne Match-Gruppen (g f√ºr global):
[31m sed [0m's/SUCHPHRASE/ERSATZ/g'
[31m sed [0m's/\(Gruppe1\)\(Gruppe2\)/Gruppe2 als Variable ist \2/g'

[33m## Erstes moo-Vorkommen pro Zeile durch foo ersetzen - in Standardausgabe und in der Datei selbst (-i):
[31m sed [0m 's/moo/foo/' < text.txt
[31m sed [0m-i 's/moo/foo/' < text.txt

[33m## moo und tar durch foo und bar ersetzen - alle Vorkommnisse (/g):
[31m sed [0m's/moo/foo/g; s/tar/bar/g' < text.txt

[33m## Mehrfache Leerzeichen auf eines reduzieren:
[31m sed [0m's/  */ /g'

[33m## Tabs durch Leerzeichen ersetzen:
[31m sed [0m's/\t/ /g'

[33m## Alle moo-Vorkommen l√∂schen:
[31m sed [0m's/moo//g' < text.txt

[33m## Erste Zeile l√∂schen:
[31m sed [0m'1d' < text.txt

[33m## Alle Zeilen au√üer der Ersten l√∂schen:
[31m sed [0m'1!d' < text.txt

[33m## Zeilen 4 bis 8 l√∂schen:
[31m sed [0m'4,8d' < text.txt

[33m## Reihenfolge der Ziffern nach "1 2 3 4" umstellen/korrigieren - sed-Syntax:
[0m echo 3 1 4 2 |[31m sed [0m 's/\([[:digit:]]\) \([[:digit:]]\) \([[:digit:]]\) \([[:digit:]]\)/\2\4\1\3/'

[33m## Reihenfolge der Ziffern nach "1 2 3 4" umstellen/korrigieren - erweiterte RegEx-Syntax:
[0m echo 3 1 4 2 |[31m sed -E 's/([0-9]) ([0-9]) ([0-9]) ([0-9])/\2 \4 \1 \3/'

[33m## In diesem Zusammenhang interessant:
[31m curl [0mcli.help/regex
[31m curl [0mcli.help/grep
Ausf√ºhrlich zu RegEx: tutonaut.de/regulaere-ausdruecke-retten-das-jahr-2302/

